#!/bin/sh



# postinst script for webpy-example
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# source debconf library
. /usr/share/debconf/confmodule

# For user-services only, for earch target an extra section! for system-services user deb-systemd*
SERVICES="mkbackup-userdir.path"
TARGET="paths.target"
case "$1" in

    configure)
        for SERVICE in $SERVICES; do
            [ -e "/etc/systemd/user/${TARGET}.wants/" ] || mkdir -p "/etc/systemd/user/${TARGET}.wants/"
            [ -e "/usr/lib/systemd/user/${SERVICE}" ] && ln -sf "/usr/lib/systemd/user/${SERVICE}" "/etc/systemd/user/${TARGET}.wants/${SERVICE}"
        done
        ;;

    abort-upgrade|abort-remove|abort-deconfigure)
        exit 0
        ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
        ;;

esac

SERVICES="backup.automount
var-cache-backup.automount
btrfs-scrub@var-cache-btrfs_pool_SYSTEM.service
mkbackup@manually.service
mkbackup@aptupgrade.service
mkbackup@daily.service
mkbackup@weekly.service
mkbackup@monthly.service"

for SERVICE in $SERVICES; do
    # This will only remove masks created by d-s-h on package removal.
    deb-systemd-helper unmask $SERVICE >/dev/null || true

    # was-enabled defaults to true, so new installations run enable.
    if deb-systemd-helper --quiet was-enabled $SERVICE; then
            # Enables the unit on first installation, creates new
            # symlinks on upgrades if the unit file has changed.
            deb-systemd-helper enable $SERVICE >/dev/null || true
    else
            # Update the statefile to add new symlinks (if any), which need to be
            # cleaned up on purge. Also remove old symlinks.
            deb-systemd-helper update-state $SERVICE >/dev/null || true
    fi
done


db_stop

exit 0

#!/bin/sh



# postinst script for webpy-example
#
# see: dh_installdeb(1)

#_DEB_SYSTEMD_HELPER_DEBUG=1

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# source debconf library
#. /usr/share/debconf/confmodule

# For user-services only, for earch target an extra section! for system-services user deb-systemd*
# put in full unit-name. for example "mkbackup@hourly.service"

USERLOCS="/etc/systemd/user/ /usr/lib/systemd/user/"

SERVICES="mkbackup-userdir.path"
case "$1" in

    configure)
        for SERVICE in $SERVICES; do
            UNIT_NAME=$(echo $SERVICE|sed -e 's/\@.*\.\([a-z][a-z]*\)$/@.\1/')
            for loc in USERLOCS;do
                if [ -e "${loc}${UNIT_NAME}" ]; then
                    UNIT_LOC="$loc"
                    break
                fi
            done
            
            if [ x${UNIT_LOC} != "x" ]; then
                for TARGET in $(gawk -F "=" '\
                        $1 ~ /WantedBy/ && $1 !~ /^#/{split($2,wants," ")} \
                        $1 ~ /RequiredBy/ && $1 !~ /^#/{split($2,requ," ")} \
                        END{for (w in wants){print wants[w]".wants"};for (r in requ){print requ[r]".requires"}}' "${UNIT_LOC}${UNIT_NAME}");do
                    [ -e "/etc/systemd/user/${TARGET}/" ] || mkdir -p "/etc/systemd/user/${TARGET}/"
                    [ -e "${UNIT_LOC}${SERVICE}" ] && ln -sf "${UNIT_LOC}${SERVICE}" "/etc/systemd/user/${TARGET}/${SERVICE}"
                done
            fi
        done
        ;;

    abort-upgrade|abort-remove|abort-deconfigure)
        exit 0
        ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
        ;;

esac


# System-Services:
# put in full unit-name. for example "mkbackup@hourly.service"
SERVICES="backup.automount
var-cache-backup.automount
btrfs-scrub@var-cache-btrfs_pool_SYSTEM.service
mkbackup@manually.service
mkbackup@aptupgrade.service
mkbackup@daily.service
mkbackup@weekly.service
mkbackup@monthly.service"

for SERVICE in $SERVICES; do
    # This will only remove masks created by d-s-h on package removal.
    deb-systemd-helper-xe unmask $SERVICE >/dev/null || true

    # was-enabled defaults to true, so new installations run enable.
    if deb-systemd-helper-xe --quiet was-enabled $SERVICE; then
            # Enables the unit on first installation, creates new
            # symlinks on upgrades if the unit file has changed.
            deb-systemd-helper-xe enable $SERVICE >/dev/null || true
    else
            # Update the statefile to add new symlinks (if any), which need to be
            # cleaned up on purge. Also remove old symlinks.
            deb-systemd-helper-xe update-state $SERVICE >/dev/null || true
    fi
done


#db_stop

exit 0

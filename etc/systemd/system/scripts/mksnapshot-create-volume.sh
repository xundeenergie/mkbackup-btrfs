#!/bin/bash

# Create udev-rule and mount-entry for new backup-volume

ACTION=$1
case $2 in
	-u)
		UUID=$3;;
	-p)
		PARTUUID=$3;;
	*)
		DEV=$2
		UUID="$(blkid $DEV -o value -s UUID)"
		PARTUUID="$(blkid $DEV -o value -s PARTUUID)"
		;;
esac

DESTUDEV="/tmp/"
DESTSYSTEMD="/tmp/"

echo "$ACTION $DEV"

TYPE="$(blkid $DEV -o value -s TYPE)"

if [ "$PARTUUID"x = "x" ]; then
	if [ "$UUID"x = "x" ]; then
		DUUID="$UUID" #DUUID is uuid which is taken to use
		SUUID="UUID" #SUUID is the string for the udev-rule it's UUID or PARTUUID
		ID="uuid" #ID is also for the udev-rule. To look in /dev/disk/by-uuid or /dev/disk/by-partuuid
	else
		echo "$DEV is no valid device"
		exit 3
	fi
else
	DUUID="$PARTUUID"
	SUUID="PARTUUID"
	ID="partuuid"
fi

enable () {
echo "ACTION==\"add\", KERNEL==\"sd*\", SUBSYSTEMS==\"usb\", ENV{ID_FS_${SUUID}}=\"$DUUID\", SYMLINK+=\"disk/mars\", TAG+=\"systemd\", ENV{SYSTEMD_WANTS}+=\"mkbackup@BKP.target\"

ACTION==\"remove\", KERNEL==\"sd*\", SUBSYSTEMS==\"usb\", ENV{ID_FS_${SUUID}}=\"$DUUID\", \
RUN+=\"/bin/systemctl --no-block stop mkbackup@BKP.target\"" > ${DESTUDEV}99-ext-bkp-volume-${DUUID}.rules


echo "[Unit]
SourcePath=/etc/fstab
Documentation=man:fstab(5) man:systemd-fstab-generator(8)
Wants=backup.mount backup.automount
Before=backup.mount

[Mount]
What=/dev/disk/by-${ID}/$DUUID
Where=/var/cache/backup
Type=btrfs
TimeoutSec=10s
Options=defaults,noatime,nofail,compress=lzo,nospace_cache,noinode_cache,relatime,ssd,discard,subvol=/" > ${DESTSYSTEMD}var-cache-backup.mount

echo "
# Automatically generated by systemd-fstab-generator

[Unit]
Documentation=man:fstab(5) man:systemd-fstab-generator(8)
DefaultDependencies=no
Conflicts=umount.target
Before=umount.target backup.mount
BindsTo=mkbackup@BKP.target

[Automount]
Where=/var/cache/backup
TimeoutIdleSec=15s

[Install]
WantedBy=mkbackup@BKP.target" > ${DESTSYSTEMD}var-cache-backup.automount

echo "[Unit]
SourcePath=/etc/fstab
Documentation=man:fstab(5) man:systemd-fstab-generator(8)
BindsTo=var-cache-backup.mount
PartOf=var-cache-backup.mount

[Mount]
What=/var/cache/backup/$(hostname)
Where=/backup
Type=none
TimeoutSec=10s
Options=bind,ro,nofail" > ${DESTSYSTEMD}backup.mount

echo "
[Unit]
Before=local-fs.target
BindsTo=mkbackup@BKP.target

[Automount]
TimeoutIdleSec=15s
Where=/backup

[Install]
#WantedBy=backup-automount.target
WantedBy=mkbackup@BKP.target" > ${DESTSYSTEMD}backup.automount

if [ $(ls ${DESTUDEV}99-ext-bkp-volume-.*.rules|wc -l) -ge 1 -a [ ! -e ${DEST}mkbackup@BKP.target ]
then

	echo "[Unit]
	Description=Target for services for %i in mkbackup

	Documentation=man:systemd.special(7)
	StopWhenUnneeded=no" > ${DESTSYSTEMD}mkbackup@BKP.target
fi

}

disable () {
	rm -f ${DESTSYSTEMD}backup.mount
	rm -f ${DESTSYSTEMD}var-cache-backup.mount
	rm -f ${DESTSYSTEMD}ext-bkp-volume.udev
	rm -f ${DESTSYSTEMD}backup.automount
if [ $(ls ${DESTUDEV}99-ext-bkp-volume-.*.rules|wc -l) -eq 1 -a [ -e ${DEST}mkbackup@BKP.target ]
then
	rm -f ${DESTSYSTEMD}mkbackup@BKP.target
fi
}

case $TYPE in
	btrfs)
		;;
	*)
		echo "$DEV isn't a btrfs-filesystem. Exiting"; exit 1;;
esac

case $ACTION in
	enable|start)
		enable "$DEV";;
	disable|stop)
		disable "$DEV";;
	*)
		echo "$ACTION not recognized";
		exit 2;;
esac

/usr/bin/systemctl daemon-reload
/usr/bin/systemctl 
exit 0
